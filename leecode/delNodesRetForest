/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> res;
        set<int> s;
        for (auto a : to_delete) {
            s.insert(a);
        }

        bfs(root,s,1,res);
        return res;

    }

    void bfs(TreeNode* &root, set<int> &toDelete,bool isPD,vector<TreeNode*> &res) {
        
        bool isNeedD = false;
        if (root == nullptr)
            return;
        if (toDelete.count(root->val))
            isNeedD = true;

        if (!isNeedD && isPD) 
            res.push_back(root);

        bfs(root->left,toDelete,isNeedD,res);
        bfs(root->right,toDelete,isNeedD,res);

        if (isNeedD)
            root = nullptr;
            


    }
};
