struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };


 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
------------------------------------------------------------------------------------------
1.
auto comparex = [&](const item &a, const item &b) { return a.sum > b.sum;};

priority_queue<item,vector<item>,decltype(comparex)> q(comparex);



2.
struct cmp {
        bool operator() (pair<int, int> &a, pair<int, int> &b) {
            return a.first + a.second > b.first + b.second;
        }
    };
priority_queue<pair<int,int>,vector<pair<int,int>>,cmp> q;

3.
priority_queue<int, vector<int>, greater<int>> pq1;


------------------------------------------------------------------------------------------


 vector<vector<int>> dir{{-1,-1},{-1,0},{0,-1},{-1,1},{0,1},{1,1},{1,0},{1,-1}};

 string k = to_string(pattern[i]);

 memset(dp,0,sizeof(int)*100*201);

 unordered_map<int,map<int,int>> m;

int M = 1e9+7;
r%100000007;